# Check for existing ssh keys.
# If no keys present exit.
# If keys found add these to kali box, for ssh public key authentication.
#
# Arguments:
#   - None
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Error message if no SSH keys found.
#
# Creates:
#   - Files:
#     - ./etc/keys: Directory containing SSH public keys.
#     - ./etc/kali/authorized_keys: File containing public keys to add to kali box.
#
_labctl_getKeys() {
    if [ "$(find "$HOME/.ssh/" -name '*.pub' | wc -l)" -eq 0 ]; then
        printf 'Error: No SSH public keys found in %s.\n\n' "$HOME/.ssh/" >&2
        printf 'Please generate SSH keys. For example: %s.\n'\
            'ssh-keygen -ted25519' >&2
        printf 'Otherwise you won'\''t be able to use the lab.\n' >&2
        exit 1
    fi
 
    _labctl_removeKeys

    # Variable is defined in ../lab.sh.
    # shellcheck disable=SC2154
    if ! [ -d "${key_dir}" ]; then
        mkdir -p "${key_dir}"
    fi
    
    find "$HOME/.ssh/" -name '*.pub' -exec cp {} "${key_dir}" \;
    # Variable is defined in ../lab.sh.
    # shellcheck disable=SC2154
    find "${key_dir}" -name '*.pub' -exec cat {} \; >> "${auth_keys}"
}

#
# Prepare needed ressources for lab to work.
#
# Arguments:
#   - None
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Nothing.
#
# Creates:
#   - Nothing
#

#
# Build all needed ressources for the lab.
#
# Arguments:
#   - None
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Nothing.
#
# Creates:
#   - Nothing
#
_labctl_build() {
   
    docker-compose build --parallel || exit 1 
}

#
# Call function to generate compose yml and start the lab afterwards.
#
# Arguments:
#   - $1 = level: Create lab for specific level.
#   - $2 = red_team_services: Spawn additional red team services.
#   - $5 = all_services: If set to 1 spawn all available services.
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Nothing.
#
# Creates:
#   - Files:
#     - $HOME/.local/var/run/pentest_lab/info: Persistently save lab state.
#
_labctl_up() {
    local level="$1"
    local red_team_services="$2"
    local all_services="$5"
    local run_dir

    run_dir="$HOME/.local/var/run/pentest_lab"

    mkdir -p "${run_dir}" || true
    printf '' > "${run_dir}/info"

    {
    printf 'level: %s\n' "${level}"
    printf 'red_team_services: %s\n' "${red_team_services}"
    } >> "${run_dir}/info"
    
    docker-compose up -d --remove-orphans || _labctl_emergencyCleanup
}

#
# Remove orphaned files if lab startup fails.
#
# Arguments:
#   - None
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Nothing.
#
# Creates:
#   - Nothing
#
_labctl_emergencyCleanup() {
    local run_dir
    run_dir="$HOME/.local/var/run/pentest_lab"


    if [ -d "${run_dir}" ]; then
        rm -rf "${run_dir}"
    fi

    docker-compose down --remove-orphans

    printf '\n\e[31m\e[1mSome error occured.\nEmergency cleanup done.\n\e[0m' \
        >&2
    exit 1
}

#
# Stop the lab.
#
# Arguments:
#   - None
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Nothing.
#
# Creates:
#   - Nothing
#
_labctl_down() {
    local run_dir

    run_dir="$HOME/.local/var/run/pentest_lab"

    docker-compose down --remove-orphans

    if [ -d "${run_dir}" ]; then
        rm -rf "${run_dir}"
    fi

}

#
# Remove all ressources owned by the lab - reset the lab.
#
# Arguments:
#   - None
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Nothing.
#
# Creates:
#   - Nothing
#
_labctl_prune() {
    docker-compose down --remove-orphans --rmi all --volumes
    docker-compose rm -fsv
    _labctl_removeKeys
}

#
# Remove ssh keys from local directory.
#
# Arguments:
#   - None
#
# Returns:
#   - 0: Always.
#
# Prints:
#   - stdout: Nothing.
#   - stderr: Nothing.
#
# Creates:
#   - Nothing
#
_labctl_removeKeys() {
    printf 'Removing: %s.\n' "${key_dir}"
    if [ -d "${key_dir}" ]; then
        rm -r "${key_dir}"
    fi

    printf 'Removing: %s.\n' "${auth_keys}"
    if [ -f "${auth_keys}" ]; then
        rm "${auth_keys}"
    fi
}
